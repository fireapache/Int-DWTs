	/* Testes de compressão (10/09/2013)

	if (argc != 3) return 1;

	double **mat = carregar_imagem(argv[1]);

	Haar_MatrixDecomposition(mat, y, x, false, false);

	VinisMatrixNormalization(mat, y, false);

	Haar_Compress(mat, x, y, (double)atoi(argv[2]));

	VinisMatrixNormalization(mat, y, false, true);

	Haar_MatrixComposition(mat, y, x, false, false);

	escrever_imagem((char*)"compress2.ppm", mat);

	//*/

	/* Testes para o artigo (24/07/2013)

#define MSIZE 1024

	double **mat = carregar_imagem((char*)"MonaLisa.ppm");
	interval **intmat1, **intmat2;

	intmat1 = new interval*[MSIZE];
	intmat2 = new interval*[MSIZE];

	for (UINT i = 0; i < MSIZE; i++)
	{
		intmat1[i] = new interval[MSIZE];
		intmat2[i] = new interval[MSIZE];
	}

	for (UINT i = 0; i < MSIZE; i++)
	for (UINT j = 0; j < MSIZE; j++)
	{
		intmat1[i][j] = interval(mat[i][j]);
		intmat2[i][j] = interval(mat[i][j]);
	}

	cout << "Decomposicao Padrao:" << endl;

	INT_Haar_MatrixDecomposition(intmat1, MSIZE, MSIZE, true, true);
	INT_Haar_MatrixDecomposition(intmat2, MSIZE, MSIZE, false, true);

	INT_VinisMatrixNormalization(intmat2, MSIZE, true);

	cout << "Metodo antigo:\t" << INT_error(intmat1, MSIZE, MSIZE) << endl;
	cout << "Metodo novo  :\t" << INT_error(intmat2, MSIZE, MSIZE) << endl;
	cout << endl;

	cout << "Composicao Padrao:" << endl;

	INT_VinisMatrixNormalization(intmat2, MSIZE, true, true);

	INT_Haar_MatrixComposition(intmat2, MSIZE, MSIZE, false, true);
	INT_Haar_MatrixComposition(intmat1, MSIZE, MSIZE, true, true);

	cout << "Metodo antigo:\t" << INT_error(intmat1, MSIZE, MSIZE) << endl;
	cout << "Metodo novo  :\t" << INT_error(intmat2, MSIZE, MSIZE) << endl;
	cout << endl;

	cout << "Decomposicao Nao-Padrao:" << endl;

	for (UINT i = 0; i < MSIZE; i++)
	for (UINT j = 0; j < MSIZE; j++)
	{
		intmat1[i][j] = interval(mat[i][j]);
		intmat2[i][j] = interval(mat[i][j]);
	}

	INT_Haar_MatrixDecomposition(intmat1, MSIZE, MSIZE, true, false);
	INT_Haar_MatrixDecomposition(intmat2, MSIZE, MSIZE, false, false);

	INT_VinisMatrixNormalization(intmat2, MSIZE, false);

	cout << "Metodo antigo:\t" << INT_error(intmat1, MSIZE, MSIZE) << endl;
	cout << "Metodo novo  :\t" << INT_error(intmat2, MSIZE, MSIZE) << endl;
	cout << endl;

	cout << "Composicao Nao-Padrao:" << endl;

	INT_VinisMatrixNormalization(intmat2, MSIZE, false, true);

	INT_Haar_MatrixComposition(intmat2, MSIZE, MSIZE, false, false);
	INT_Haar_MatrixComposition(intmat1, MSIZE, MSIZE, true, false);

	cout << "Metodo antigo:\t" << INT_error(intmat1, MSIZE, MSIZE) << endl;
	cout << "Metodo novo  :\t" << INT_error(intmat2, MSIZE, MSIZE) << endl;
	cout << endl;

	//*/

	/* Testes Alice (29/01/2013)

	int n = 64;

	double *vec = new double[64];
	double **dados;

	for (int i = 0; i < n; i++)
		vec[i] = pow((double)i / 64.0, 2.0);

	dados = Haar_Decomposition_For_Graphs(vec, n, false);

	for (int i = 0; i < n - 1; i++)
		cout << dados[0][i] << '\t' << dados[1][i] << endl;

	//*/

	/* Testes do novo método de normalização

	interval *vec1 = new interval[16];
	interval *vec2 = new interval[16];

	for (int i = 0; i < 16; i++)
	{
		vec1[i] = vec2[i] = (interval)(i);
	}

	INT_Haar_Decomposition(vec1, 16, true);
	INT_Haar_Decomposition(vec2, 16, false);

	for (int i = 0; i < 16; i++)
	{
		cout << vec1[i] << '\t' << vec2[i] << endl;
	}

	cout << endl << endl;

	INT_VinisNormalization(vec2, 16);

	for (int i = 0; i < 16; i++)
	{
		cout << vec1[i] << '\t' << vec2[i] << endl;
	}

	//*/

	///* Testes do novo método de normalização de matricial
	
	/*

#define MSIZE 16

	interval **mat1 = new interval*[MSIZE];
	interval **mat2 = new interval*[MSIZE];
	
	for (int m = 0; m < MSIZE; m++)
	{
		mat1[m] = new interval[MSIZE];
		mat2[m] = new interval[MSIZE];

		for (int i = 0; i < MSIZE; i++)
		{
			mat1[m][i] = interval(i * m + i);
			mat2[m][i] = interval(i * m + i);
		}
	}
	
	// for (int l = 0; l < MSIZE; l++)
	// for (int c = 0; c < MSIZE; c++)
	// {
	// 	cout << mat1[l][c];

	// 	if (c != MSIZE - 1)	cout << '\t';
	// 	else				cout << '\n';
	// }

	// cout << "\n\n";

	INT_Haar_MatrixDecomposition(mat1, MSIZE, MSIZE, true, true);
	INT_Haar_MatrixDecomposition(mat2, MSIZE, MSIZE, false, true);

	for (int l = 0; l < MSIZE; l++)
	for (int c = 0; c < MSIZE; c++)
	{
		cout << mat2[l][c];

		if (c != MSIZE - 1)	cout << '\t';
		else				cout << '\n';
	}

	cout << "\n\n";

	for (int l = 0; l < MSIZE; l++)
	for (int c = 0; c < MSIZE; c++)
	{
		cout << mat1[l][c];

		if (c != MSIZE - 1)	cout << '\t';
		else				cout << '\n';
	}

	cout << "\n\n";

	INT_VinisMatrixNormalization(mat2, MSIZE, true);

	for (int l = 0; l < MSIZE; l++)
	for (int c = 0; c < MSIZE; c++)
	{
		cout << mat2[l][c];

		if (c != MSIZE - 1)	cout << '\t';
		else				cout << '\n';
	}

	cout << "\n\n";

	//*/

	/* Testes Alice (29/01/2013)

	double *teste1 = new double[64];	// Alocação de memória para o armazenamento dos resultados
	double *teste2 = new double[64];	//pontuais das funções e transformações dos testes.
	double *teste3 = new double[64];	//

	interval *INT_teste1 = new interval[64];	// Alocação de memória para o armazenamento dos resultados
	interval *INT_teste2 = new interval[64];	//intervalares das funções e transformações dos testes.
	interval *INT_teste3 = new interval[64];	//

	cout << "======================================== teste1 entrada" << endl << endl;

	for (int i = 0; i < 64; i++) // Função constante y = 2 para 64 pontos.
	{
		teste1[i] = 2.0;
		INT_teste1[i] = interval(2);
		cout << i << "/64:" << '\t' << 2 << endl;
	}

	cout << "======================================== teste2 entrada" << endl << endl;

	for (int i = 0; i < 64; i++) // Função linear y = x para 64 pontos no intervalo [0,1].
	{
		teste2[i] = double(i) / 64.0;
		INT_teste2[i] = interval(i) / interval(64);
		cout << i << "/64:" << '\t' << double(i) / 64.0 << endl;
	}

	cout << "======================================== teste3 entrada" << endl << endl;

	for (int i = 0; i < 64; i++) // Função quadrática y = x² para 64 pontos no intervalo [0,1].
	{
		teste3[i] = pow(double(i) / 64.0, 2.0);
		INT_teste3[i] = pow(interval(i) / interval(64), interval(2));
		cout << i << "/64:" << '\t' << pow(double(i) / 64.0, 2.0) << endl;
	}

	Haar_Decomposition(teste1, 64, false);			// Transformação direta pontual não-normalizada.
	Haar_Decomposition(teste2, 64, false);
	Haar_Decomposition(teste3, 64, false);

	INT_Haar_Decomposition(INT_teste1, 64, false);	// Transformação direta intervalar não-normalizada.
	INT_Haar_Decomposition(INT_teste2, 64, false);
	INT_Haar_Decomposition(INT_teste3, 64, false);

	cout << "======================================== teste1 não-normalizado" << endl << endl;

	for (int i = 0; i < 64; i++)
		cout << i << "/64:" << '\t' << teste1[i] << endl;

	cout << endl << endl << endl;

	for (int i = 0; i < 64; i++)
		cout << i << "/64:" << '\t' << INT_teste1[i] << endl;

	cout << endl << endl << endl;

	cout << "======================================== teste2 não-normalizado" << endl << endl;

	for (int i = 0; i < 64; i++)
		cout << i << "/64:" << '\t' << teste2[i] << endl;

	cout << endl << endl << endl;

	for (int i = 0; i < 64; i++)
		cout << i << "/64:" << '\t' << INT_teste2[i] << endl;

	cout << endl << endl << endl;

	cout << "======================================== teste3 não-normalizado" << endl << endl;

	for (int i = 0; i < 64; i++)
		cout << i << "/64:" << '\t' << teste3[i] << endl;

	cout << endl << endl << endl;

	for (int i = 0; i < 64; i++)
		cout << i << "/64:" << '\t' << INT_teste3[i] << endl;

	cout << endl << endl << endl;

	for (int i = 0; i < 64; i++) // Função constante y = 2 para 64 pontos.
	{
		teste1[i] = 2.0;
		INT_teste1[i] = interval(2);
	}

	for (int i = 0; i < 64; i++) // Função linear y = x para 64 pontos no intervalo [0,1].
	{
		teste2[i] = double(i) / 64.0;
		INT_teste2[i] = interval(i) / interval(64);
	}

	for (int i = 0; i < 64; i++) // Função quadrática y = x² para 64 pontos no intervalo [0,1].
	{
		teste3[i] = pow(double(i) / 64.0, 2.0);
		INT_teste3[i] = pow(interval(i) / interval(64), interval(2));
	}

	Haar_Decomposition(teste1, 64, true);			// Transformação direta pontual normalizada.
	Haar_Decomposition(teste2, 64, true);
	Haar_Decomposition(teste3, 64, true);

	INT_Haar_Decomposition(INT_teste1, 64, true);	// Transformação direta intervalar normalizada.
	INT_Haar_Decomposition(INT_teste2, 64, true);
	INT_Haar_Decomposition(INT_teste3, 64, true);

	cout << "======================================== teste1 normalizado" << endl << endl;

	for (int i = 0; i < 64; i++)
		cout << i << "/64:" << '\t' << teste1[i] << endl;

	cout << endl << endl << endl;

	for (int i = 0; i < 64; i++)
		cout << i << "/64:" << '\t' << INT_teste1[i] << endl;

	cout << endl << endl << endl;

	cout << "======================================== teste2 normalizado" << endl << endl;

	for (int i = 0; i < 64; i++)
		cout << i << "/64:" << '\t' << teste2[i] << endl;

	cout << endl << endl << endl;

	for (int i = 0; i < 64; i++)
		cout << i << "/64:" << '\t' << INT_teste2[i] << endl;

	cout << endl << endl << endl;

	cout << "======================================== teste3 normalizado" << endl << endl;

	for (int i = 0; i < 64; i++)
		cout << i << "/64:" << '\t' << teste3[i] << endl;

	cout << endl << endl << endl;

	for (int i = 0; i < 64; i++)
		cout << i << "/64:" << '\t' << INT_teste3[i] << endl;

	cout << endl << endl << endl;

	//*/

	/* Imagens
	double **entrada, **aux, **saida;

	// Verifica os argumentos necessários para o processo.
	if (argc == 5)
	{
		int aux1, aux2;
		
		aux1 = atoi(argv[3]);
		aux2 = atoi(argv[4]);
		
		if (!(entrada = carregar_imagem(argv[1]))) return 1;
		
		aux = to_greyscale(entrada, x, y);
		
		Haar_MatrixDecomposition(aux, y, x, aux1, aux2);
		//Haar_MatrixComposition(aux, y, x, aux1, aux2);
		
		saida = from_greyscale(aux, x, y);
		
		escrever_imagem_from_greyscale(argv[2], saida);
	}
	else if (argc == 2)
	{
		if (!(entrada = carregar_imagem(argv[1]))) return 1;
		
		aux = to_greyscale(entrada, x, y);
		
		cout << x << " " << y << endl;
		interval **intsaida = new interval*[y];
		interval **backup = new interval*[y];

		for (int m = 0; m < y; m++)
		intsaida[m] = new interval[x];
		for (int m = 0; m < y; m++)
		backup[m] = new interval[x];

		for (int i = 0; i < y; i++)
		for (int j = 0; j < x; j++)
		backup[i][j] = interval(aux[i][j]);

		for (int i = 0; i < y; i++)
		for (int j = 0; j < x; j++)
		intsaida[i][j] = backup[i][j];

		cout << endl;

		INT_Haar_MatrixDecomposition(intsaida, y, x, false, true);
		cout << "Decomposição \t Não-Normalizada Padrão: \t" << INT_error(intsaida, y, x) << endl;

		for (int i = 0; i < y; i++)
		for (int j = 0; j < x; j++)
		intsaida[i][j] = backup[i][j];
		
		INT_Haar_MatrixComposition(intsaida, y, x, false, true);
		cout << "Composição \t Não-Normalizada Padrão: \t" << INT_error(intsaida, y, x) << endl;

		for (int i = 0; i < y; i++)
		for (int j = 0; j < x; j++)
		intsaida[i][j] = backup[i][j];

		INT_Haar_MatrixDecomposition(intsaida, y, x, false, false);
		cout << "Decomposição \t Não-Normalizada Não-Padrão: \t" << INT_error(intsaida, y, x) << endl;

		for (int i = 0; i < y; i++)
		for (int j = 0; j < x; j++)
		intsaida[i][j] = backup[i][j];
		
		INT_Haar_MatrixComposition(intsaida, y, x, false, false);
		cout << "Composição \t Não-Normalizada Não-Padrão: \t" << INT_error(intsaida, y, x) << endl;

		for (int i = 0; i < y; i++)
		for (int j = 0; j < x; j++)
		intsaida[i][j] = backup[i][j];

		INT_Haar_MatrixDecomposition(intsaida, y, x, true, true);
		cout << "Decomposição \t Normalizada Padrão: \t\t" << INT_error(intsaida, y, x) << endl;

		for (int i = 0; i < y; i++)
		for (int j = 0; j < x; j++)
		intsaida[i][j] = backup[i][j];
		
		INT_Haar_MatrixComposition(intsaida, y, x, true, true);
		cout << "Composição \t Normalizada Padrão: \t\t" << INT_error(intsaida, y, x) << endl;

		for (int i = 0; i < y; i++)
		for (int j = 0; j < x; j++)
		intsaida[i][j] = backup[i][j];

		INT_Haar_MatrixDecomposition(intsaida, y, x, true, false);
		cout << "Decomposição \t Normalizada Não-Padrão: \t" << INT_error(intsaida, y, x) << endl;
		
		for (int i = 0; i < y; i++)
		for (int j = 0; j < x; j++)
		intsaida[i][j] = backup[i][j];
		
		INT_Haar_MatrixComposition(intsaida, y, x, true, false);
		cout << "Composição \t Normalizada Não-Padrão: \t" << INT_error(intsaida, y, x) << endl;

		cout << endl;
	}
	else
	{
		cout << endl;
		cout << "Opções de parâmetros para o programa: " << endl;
		cout << "=====" << endl;
		cout << "**Lista os intervalos de erro da computação pelos 4 métodos de decomposição \n e composição da transformada:" << endl;
		cout << endl;
		cout << "1. entrada.ppm"<< endl;
		cout << "=====" << endl;
		cout << "**Escreve um arquivo do tipo PPM com o resultado da transformação:" << endl;
		cout << endl;
		cout << "1. entrada.ppm 2. saida.ppm 3. bool_normalização 4. bool_padrão/não-padrão" << endl;
		cout << endl;
	}
	//*/
	
	/* MS Visual C++
	
	double **saida;
	
	if (!(saida = carregar_imagem("AW.ppm"))) return 0;

	Haar_MatrixDecomposition(saida, y, x, false, false);
	escrever_imagem("Decom_AW_nonorm_nonstan.ppm", saida);
	Haar_MatrixComposition(saida, y, x, false, false);
	escrever_imagem("Com_AW_nonorm_nonstan.ppm", saida);

	Haar_MatrixDecomposition(saida, y, x, true, false);
	escrever_imagem("Decom_AW_norm_nonstan.ppm", saida);
	Haar_MatrixComposition(saida, y, x, true, false);
	escrever_imagem("Com_AW_norm_nonstan.ppm", saida);

	Haar_MatrixDecomposition(saida, y, x, false, true);
	escrever_imagem("Decom_AW_nonorm_stan.ppm", saida);
	Haar_MatrixComposition(saida, y, x, false, true);
	escrever_imagem("Com_AW_nonorm_stan.ppm", saida);

	Haar_MatrixDecomposition(saida, y, x, true, true);
	escrever_imagem("Decom_AW_norm_stan.ppm", saida);
	Haar_MatrixComposition(saida, y, x, true, true);
	escrever_imagem("Com_AW_norm_stan.ppm", saida);
	

	//*/

	/*

	double **saida;
	
	if (!(saida = carregar_imagem("AW.ppm"))) return 0;

	gray_scale(saida, x, y);
	escrever_imagem("0.ppm", saida);
	Haar_MatrixDecomposition(saida, y, x, false, true);
	escrever_imagem("1.ppm", saida);
	Haar_MatrixComposition(saida, y, x, false, true);
	escrever_imagem("2.ppm", saida);

	//*/

	/* Teste do Paper da Alice
	double x[4] = {9.0, 7.0, 3.0, 5.0};
	interval in[4] = {interval(9), interval(7), interval(3), interval(5)};
	
	cout << endl;
	
	cout << "==========================================" << endl;
	cout << "Entrada: \n" << endl;
	cout << "{9, 7, 3, 5}" << endl;
	cout << endl;
	
	haar1d(x, 4, false);
	inthaar1d(in, 4, false);
	
	cout << "==========================================" << endl;
	cout << "Resultados com vetores não-normalizados: \n" << endl;
	
	cout << "Pontuais: " << endl;
	for(int i = 0; i < 4; i++)
		cout << x[i] << endl;
	
	cout << endl;
	
	cout << "Intervalares: " << endl;
	for(int i = 0; i < 4; i++)
		cout << in[i] << endl;
	
	cout << endl;
	
	double x2[4] = {9.0, 7.0, 3.0, 5.0};
	interval in2[4] = {interval(9), interval(7), interval(3), interval(5)};
	
	haar1d(x2, 4, true);
	inthaar1d(in2, 4, true);
	
	cout << "==========================================" << endl;
	cout << "Resultados com vetores normalizados: \n" << endl;
	
	cout << "Pontuais: " << endl;
	for(int i = 0; i < 4; i++)
		cout << x2[i] << endl;
	
	cout << endl;
	
	cout << "Intervalares: " << endl;
	for(int i = 0; i < 4; i++)
		cout << in2[i] << endl;
	
	cout << endl;
	
	cout << "==========================================" << endl;
	cout << "Intervalo de erro: \n" << endl;
	
	cout << intervalo_erro(in2, 4) << endl;
	
	cout << endl;
	*/
	
	/* Outro teste
	double x3[4] = {4.0, 2.0, 5.0, 5.0};
	interval in3[4] = {interval(4), interval(2), interval(5), interval(5)};
	
	cout << endl;
	
	cout << "==========================================" << endl;
	cout << "Entrada: \n" << endl;
	cout << "{4, 2, 5, 5}" << endl;
	cout << endl;
	
	haar1d(x3, 4, false);
	inthaar1d(in3, 4, false);
	
	cout << "==========================================" << endl;
	cout << "Resultados com vetores não-normalizados: \n" << endl;
	
	cout << "Pontuais: " << endl;
	for(int i = 0; i < 4; i++)
		cout << x3[i] << endl;
	
	cout << endl;
	
	cout << "Intervalares: " << endl;
	for(int i = 0; i < 4; i++)
		cout << in3[i] << endl;
	
	cout << endl;
	
	double x4[4] = {4.0, 2.0, 5.0, 5.0};
	interval in4[4] = {interval(4), interval(2), interval(5), interval(5)};
	
	haar1d(x4, 4, true);
	inthaar1d(in4, 4, true);
	
	cout << "==========================================" << endl;
	cout << "Resultados com vetores normalizados: \n" << endl;
	
	cout << "Pontuais: " << endl;
	for(int i = 0; i < 4; i++)
		cout << x4[i] << endl;
	
	cout << endl;
	
	cout << "Intervalares: " << endl;
	for(int i = 0; i < 4; i++)
		cout << in4[i] << endl;
	
	cout << endl;
	
	cout << "==========================================" << endl;
	cout << "Intervalo de erro: \n" << endl;
	
	cout << intervalo_erro(in4, 4) << endl;
	
	cout << endl;
	//*/
   
   /* Teste qualquer
   double teste[8] = {8.0, 9.0, 4.0, -1.0, 5.0, 7.0, 12.0, 2.0};
   //double teste[4] = {9.0, 7.0, 3.0, 5.0};
   
   for (int i = 0; i < 8; i++)
		cout << teste[i] << endl;
	
	cout << endl;
	
	Haar_Decomposition(teste, 8, true);
	
	for (int i = 0; i < 8; i++)
		cout << teste[i] << endl;
	
	cout << endl;
	
	Haar_Composition(teste, 8, true);
	
	for (int i = 0; i < 8; i++)
		cout << teste[i] << endl;
	
	cout << endl;
   
   //*/
   
   /* Outro teste qualquer
   
   bool normal = true, standard = true;
   
   cout << endl;
   if (normal) 		cout << "normalized\t";
   else        		cout << "not normalized\t";
   if (standard)	cout << "standard";
   else             cout << "nonstandard";
   cout << endl << endl;
   
   double **mat = new double*[4];
	
	for (int m = 0; m < 4; m++)
		mat[m] = new double[4];
	
	mat[0][0] = 5; mat[0][1] = 6; mat[0][2] = 1; mat[0][3] = 2;
	mat[1][0] = 4; mat[1][1] = 2; mat[1][2] = 5; mat[1][3] = 5;
	mat[2][0] = 3; mat[2][1] = 1; mat[2][2] = 7; mat[2][3] = 1;
	mat[3][0] = 6; mat[3][1] = 3; mat[3][2] = 5; mat[3][3] = 1;
	
	for(int i = 0; i < 4; i++)
	{
		for(int j = 0; j < 4; j++)
			cout << mat[i][j] << "\t";
		cout << endl;
	}
	
	cout << endl;
	
	Haar_MatrixDecomposition(mat, 4, 4, normal, standard);
	
	
	for(int i = 0; i < 4; i++)
	{
		for(int j = 0; j < 4; j++)
			cout << mat[i][j] << "\t";
		cout << endl;
	}
	
	cout << endl;
	
	Haar_MatrixComposition(mat, 4, 4, normal, standard);
	
	
	for(int i = 0; i < 4; i++)
	{
		for(int j = 0; j < 4; j++)
			cout << mat[i][j] << "\t";
		cout << endl;
	}
	
	cout << "\n" << endl;
	
	interval **intmat = new interval*[4];
	
	for (int m = 0; m < 4; m++)
		intmat[m] = new interval[4];
	
	intmat[0][0] = 5; intmat[0][1] = 6; intmat[0][2] = 1; intmat[0][3] = 2;
	intmat[1][0] = 4; intmat[1][1] = 2; intmat[1][2] = 5; intmat[1][3] = 5;
	intmat[2][0] = 3; intmat[2][1] = 1; intmat[2][2] = 7; intmat[2][3] = 1;
	intmat[3][0] = 6; intmat[3][1] = 3; intmat[3][2] = 5; intmat[3][3] = 1;
	
	for(int i = 0; i < 4; i++)
	{
		for(int j = 0; j < 4; j++)
			cout << intmat[i][j] << "\t";
		cout << endl;
	}
	
	cout << endl;
	
	INT_Haar_MatrixDecomposition(intmat, 4, 4, normal, standard);
	
	
	for(int i = 0; i < 4; i++)
	{
		for(int j = 0; j < 4; j++)
			cout << intmat[i][j] << "\t";
		cout << endl;
	}
	
	
	cout << endl;
	
	INT_Haar_MatrixComposition(intmat, 4, 4, normal, standard);
	
	
	for(int i = 0; i < 4; i++)
	{
		for(int j = 0; j < 4; j++)
			cout << intmat[i][j] << "\t";
		cout << endl;
	}
	
	cout << "\n" << endl;
	
	cout << "Operation's error interval: \t" << INT_error(intmat, 4, 4) << endl;
	
	cout << endl;
   
    //*/

	/* Outro outro teste qualquer
   
   double **mat = new double*[8];
	
	for (int m = 0; m < 8; m++)
		mat[m] = new double[8];
	
	mat[0][0] = 5; mat[0][1] = 6; mat[0][2] = 1; mat[0][3] = 2; mat[0][4] = 8; mat[0][5] = 90; mat[0][6] = 76; mat[0][7] = 23;
	mat[1][0] = 4; mat[1][1] = 2; mat[1][2] = 5; mat[1][3] = 5; mat[1][4] = 4; mat[1][5] = 20; mat[1][6] = 86; mat[1][7] = 45;
	mat[2][0] = 3; mat[2][1] = 1; mat[2][2] = 7; mat[2][3] = 1; mat[2][4] = 3; mat[2][5] = 12; mat[2][6] = 49; mat[2][7] = 67;
	mat[3][0] = 6; mat[3][1] = 3; mat[3][2] = 5; mat[3][3] = 1; mat[3][4] = 8; mat[3][5] = 90; mat[3][6] = 76; mat[3][7] = 23;
	mat[4][0] = 5; mat[4][1] = 6; mat[4][2] = 1; mat[4][3] = 2; mat[4][4] = 8; mat[4][5] = 90; mat[4][6] = 76; mat[4][7] = 23;
	mat[5][0] = 4; mat[5][1] = 2; mat[5][2] = 5; mat[5][3] = 5; mat[5][4] = 4; mat[5][5] = 20; mat[5][6] = 86; mat[5][7] = 45;
	mat[6][0] = 3; mat[6][1] = 1; mat[6][2] = 7; mat[6][3] = 1; mat[6][4] = 3; mat[6][5] = 12; mat[6][6] = 49; mat[6][7] = 67;
	mat[7][0] = 6; mat[7][1] = 3; mat[7][2] = 5; mat[7][3] = 1; mat[7][4] = 8; mat[7][5] = 90; mat[7][6] = 76; mat[7][7] = 23;
	
	for(int i = 0; i < 8; i++)
	{
		for(int j = 0; j < 8; j++)
			cout << mat[i][j] << "\t";
		cout << endl;
	}
	
	cout << endl;
	
	Haar_MatrixDecomposition(mat, 8, 8, false, false);
	
	
	for(int i = 0; i < 8; i++)
	{
		for(int j = 0; j < 8; j++)
			cout << mat[i][j] << "\t";
		cout << endl;
	}
	
	
	cout << endl;
	
	Haar_MatrixComposition(mat, 8, 8, false, false);
	
	
	for(int i = 0; i < 8; i++)
	{
		for(int j = 0; j < 8; j++)
			cout << mat[i][j] << "\t";
		cout << endl;
	}
	
	
	cout << endl;
	getchar();
   
    //*/
    
	/* Teste com matriz
	cout << endl;
	
	cout << "==========================================" << endl;
	cout << "Entrada: \n" << endl;
	cout << "{5, 6, 1, 2}" << endl;
	cout << "{4, 2, 5, 5}" << endl;
	cout << "{3, 1, 7, 1}" << endl;
	cout << "{6, 3, 5, 1}" << endl;
	cout << endl;
	
	double **mat = new double*[4];
	
	for (int m = 0; m < 4; m++)
		mat[m] = new double[4];
	
	mat[0][0] = 5; mat[0][1] = 6; mat[0][2] = 1; mat[0][3] = 2;
	mat[1][0] = 4; mat[1][1] = 2; mat[1][2] = 5; mat[1][3] = 5;
	mat[2][0] = 3; mat[2][1] = 1; mat[2][2] = 7; mat[2][3] = 1;
	mat[3][0] = 6; mat[3][1] = 3; mat[3][2] = 5; mat[3][3] = 1;

	interval **intmat = new interval*[4];
	
	for (int m = 0; m < 4; m++)
		intmat[m] = new interval[4];
	
	intmat[0][0] = interval(5);
	intmat[0][1] = interval(6);
	intmat[0][2] = interval(1);
	intmat[0][3] = interval(2);
	intmat[1][0] = interval(4);
	intmat[1][1] = interval(2);
	intmat[1][2] = interval(5);
	intmat[1][3] = interval(5);
	intmat[2][0] = interval(3);
	intmat[2][1] = interval(1);
	intmat[2][2] = interval(7);
	intmat[2][3] = interval(1);
	intmat[3][0] = interval(6);
	intmat[3][1] = interval(3);
	intmat[3][2] = interval(5);
	intmat[3][3] = interval(1);
	
	double **matriz = new double*[4];
	
	for (int m = 0; m < 4; m++)
		matriz[m] = new double[4];
	
	for (int i = 0; i < 4; i++)
	for (int j = 0; j < 4; j++)
		matriz[i][j] = mat[i][j];
	
	interval **intmatriz = new interval*[4];
	
	for (int m = 0; m < 4; m++)
		intmatriz[m] = new interval[4];
	
	for (int i = 0; i < 4; i++)
	for (int j = 0; j < 4; j++)
		intmatriz[i][j] = intmat[i][j];
	
	cout << "==========================================" << endl;
	cout << "Resultados com vetores não-normalizados: \n" << endl;

	Haar_MatrixDecomposition(matriz, 4, 4, false, true);
	
	cout << "Pontuais padrão: " << endl;
	for(int i = 0; i < 4; i++)
	{
		for(int j = 0; j < 4; j++)
			cout << matriz[i][j] << "\t";
		cout << endl;
	}
	
	cout << endl;
	
	for (int i = 0; i < 4; i++)
	for (int j = 0; j < 4; j++)
		matriz[i][j] = mat[i][j];
	
	Haar_MatrixDecomposition(matriz, 4, 4, false, false);
	
	cout << "Pontuais não-padrão: " << endl;
	for(int i = 0; i < 4; i++)
	{
		for(int j = 0; j < 4; j++)
			cout << matriz[i][j] << "\t";
		cout << endl;
	}
	
	cout << endl;
	
	cout << "Intervalares padrão: " << endl;
	
	Int_Haar_MatrixDecomposition(intmatriz, 4, 4, false, true);
	
	for(int i = 0; i < 4; i++)
	{
		for(int j = 0; j < 4; j++)
			cout << intmatriz[i][j] << "\n";
		cout << endl;
	}
	
	cout << "Intervalo de erro:  " << Int_erro(intmatriz, 4, 4) << endl;
	
	cout << endl;
	
	for (int i = 0; i < 4; i++)
	for (int j = 0; j < 4; j++)
		intmatriz[i][j] = intmat[i][j];
	
	cout << "Intervalares não-padrão: " << endl;
	
	Int_Haar_MatrixDecomposition(intmatriz, 4, 4, false, false);
	
	for(int i = 0; i < 4; i++)
	{
		for(int j = 0; j < 4; j++)
			cout << intmatriz[i][j] << "\n";
		cout << endl;
	}
	
	cout << "Intervalo de erro:  " << Int_erro(intmatriz, 4, 4) << endl;

	cout << endl;
	
	cout << "==========================================" << endl;
	cout << "Resultados com vetores normalizados: \n" << endl;
	
	for (int i = 0; i < 4; i++)
	for (int j = 0; j < 4; j++)
		matriz[i][j] = mat[i][j];
	
	for (int i = 0; i < 4; i++)
	for (int j = 0; j < 4; j++)
		intmatriz[i][j] = intmat[i][j];
	
	Haar_MatrixDecomposition(matriz, 4, 4, true, true);
	
	cout << "Pontuais padrão: " << endl;
	for(int i = 0; i < 4; i++)
	{
		for(int j = 0; j < 4; j++)
			cout << matriz[i][j] << "\n";
		cout << endl;
	}
	
	cout << endl;
	
	for (int i = 0; i < 4; i++)
	for (int j = 0; j < 4; j++)
		matriz[i][j] = mat[i][j];
	
	Haar_MatrixDecomposition(matriz, 4, 4, true, false);
	
	cout << "Pontuais não-padrão: " << endl;
	for(int i = 0; i < 4; i++)
	{
		for(int j = 0; j < 4; j++)
			cout << matriz[i][j] << "\n";
		cout << endl;
	}
	
	cout << endl;
	
	cout << "Intervalares padrão: " << endl;
	
	Int_Haar_MatrixDecomposition(intmatriz, 4, 4, true, true);
	
	for(int i = 0; i < 4; i++)
	{
		for(int j = 0; j < 4; j++)
			cout << intmatriz[i][j] << "\n";
		cout << endl;
	}
	
	cout << "Intervalo de erro:  " << Int_erro(intmatriz, 4, 4) << endl;
	
	cout << endl;
	
	for (int i = 0; i < 4; i++)
	for (int j = 0; j < 4; j++)
		intmatriz[i][j] = intmat[i][j];
	
	cout << "Intervalares não-padrão: " << endl;
	
	Int_Haar_MatrixDecomposition(intmatriz, 4, 4, true, false);
	
	for(int i = 0; i < 4; i++)
	{
		for(int j = 0; j < 4; j++)
			cout << intmatriz[i][j] << "\n";
		cout << endl;
	}
	
	cout << "Intervalo de erro:  " << Int_erro(intmatriz, 4, 4) << endl;

	cout << endl;
	//*/